import networkx as nx
import matplotlib.pyplot as plt

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.adjList = [[] for _ in range(self.V)]

    def addEdge(self, src, dest):
        self.adjList[src].append(dest)
        self.adjList[dest].append(src)

    def isConnected(self):
        visited = [False] * self.V
        self.dfs(0, visited)
        return all(visited)

    def isAcyclic(self):
        visited = [False] * self.V
        for v in range(self.V):
            if not visited[v] and self.isCyclicUtil(v, visited, -1):
                return False
        return True

    def dfs(self, v, visited):
        visited[v] = True
        for i in self.adjList[v]:
            if not visited[i]:
                self.dfs(i, visited)

    def isCyclicUtil(self, v, visited, parent):
        visited[v] = True
        for i in self.adjList[v]:
            if not visited[i]:
                if self.isCyclicUtil(i, visited, v):
                    return True
            elif i != parent:
                return True
        return False

    def visualize(self):
        G = nx.Graph()
        for v in range(self.V):
            G.add_node(v)
            for i in self.adjList[v]:
                G.add_edge(v, i)
        pos = nx.spring_layout(G)
        nx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=500, edge_color='black', linewidths=1)
        plt.show()

if __name__ == '__main__':
    graph = Graph(5)
    graph.addEdge(0, 1)
    graph.addEdge(0, 2)
    graph.addEdge(2, 3)
    graph.addEdge(3, 4)

    print("Adjacency List:")
    for i in range(graph.V):
        print(f"{i}: {graph.adjList[i]}")

    print("Is connected:", graph.isConnected())
    print("Is acyclic:", graph.isAcyclic())

    graph.visualize()
